/* 
 * MagicSquare.java
 * 
 * Author:          Computer Science E-22 staff
 * Modified by:     Bryan Miller, bmiller100wpm@gmail.com
 * Date modified:   9/4/2014
 */

import java.util.*;

public class MagicSquare {
    // The values array gives the current contents of the cells of the 
	// puzzle values[r][c] in the cell at row r, column c.  A value of 0
	// indicates a blank cell.
    private int[][] values;

    // the order (i.e., the dimension) of the puzzle
    private int order;

    // Also, add to the MagicSquare class any other fields and methods that 
    // are needed to maintain the state of a magic-square puzzle and to solve 
    // it using recursive backtracking.  Use proper encapsulation when adding 
    // new members of the class.  Determine what state needs to be maintained
    // in order to check if you can assign a particular number to a particular
    // cell, given the current state of the puzzle.
    private int magicSum;
    
    
    /**
     * Creates a MagicSquare object for a puzzle with the specified
     * dimension/order.
     */
    public MagicSquare(int order) {
        values = new int[order][order];
        this.order = order;
        
    	//Find what the rows and columns should add up to
    	this.magicSum =((this.order)*(this.order)*(this.order)+(this.order))/2;
    	System.out.println("The rows and columns should add up to: " + magicSum);

        // Add code to this constructor as needed to initialize
        // the fields that you add to the object.
    }

    /**
     * This method should call the separate recursive-backtracking method
     * that you will write, passing it the appropriate initial parameter(s).
     * It should return true if a solution is found, and false otherwise.
     */
    public boolean solve() {
        // Replace the line below with your implementation of this method.
        // REMEMBER: The recursive-backtracking code should NOT go here.
        // See the comments above.
    	
    	
    	
        return false;
    }
    
    // Make sure that you don't attempt to assign a given number in more than one location.
    // Use recursive backtracking, but it should do so in a way that allows the 
    // program to be more efficient. One way to do this is to have the program consider
    // the squares in the following order: first fill the first row, then fill the remainder 
    // of the first column, then fill the remainder of the second row, then fill the 
    // remainder of the second column, etc. You are welcome to use a different 
    // approach, provided that it employs recursive backtracking. In particular, make 
    // sure that your revised algorithm still backtracks as soon as one of the row or
    // column constraints is violated.
    /**
     * 
     * recursiveBacktracker
     * 
     * @return true if a solution is found, else false.
     */
    public boolean recursiveBacktracker(int row)
    {
    	if(sumOfColumn==magicSum)
    		return true;
    	
    	for(int i=0; i<values.length; i++)
    	{
    		if(isValid(values[row][i]))
    		{
    			applyValue(values[row][i]);
    			if(recursiveBacktracker(row+1))
    				return true;
    			removeValue(values[row][i]);
    		}
    	}
    	
    	return false;
    }

    /**
     * Displays the current state of the puzzle.
     * You should not change this method.
     */
    public void display() {
        for (int r = 0; r < order; r++) {
            printRowSeparator();
            for (int c = 0; c < order; c++) {
                System.out.print("|");
                if (values[r][c] == 0)
                    System.out.print("   ");
                else {
                    if (values[r][c] < 10) {
                        System.out.print(" ");
                    }
                    System.out.print(" " + values[r][c] + " ");
                }
            }
            System.out.println("|");
        }
        printRowSeparator();
    }

    // A private helper method used by display()
    // to print a line separating two rows of the puzzle.
    private void printRowSeparator() {
        for (int i = 0; i < order; i++)
            System.out.print("-----");
        System.out.println("-");
    }
    
    public static void main(String[] args) {
        /*******************************************************
          **** You should NOT change any code in this method ****
          ******************************************************/

        Scanner console = new Scanner(System.in);
        System.out.print("What order Magic Square would you like to solve? ");
        int order = console.nextInt();
        
        MagicSquare puzzle = new MagicSquare(order);
        if (puzzle.solve()) {
            System.out.println("Here's the solution:");
            puzzle.display();
        } else {
            System.out.println("No solution found.");
        }
    }
}