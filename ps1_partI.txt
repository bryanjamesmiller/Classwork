Name:  Bryan Miller
email:  bmiller100wpm@gmail.com

1. a)  



i (5)
-------			-----
c (a's reference----------------------------------_
-------			-----                     /
b (reference--------->)	{5, 4, 3, 7, 1}          /     
-------			-----		        /
a (reference--------->)	{5, 4, 3, 1, 1}	<-----_/
-------			-----                 
stack			heap               



1. b)  Here is what will be printed out:
1 7 1


2. a)  //I tried to just use one "for loop" for efficiency's sake:

public static void shiftRight(int[] arr)
{
	// Store the last value of the array into temp
	int temp=arr[arr.length-1];  

	for(int i=arr.length-1; i>0; i--)
	{

// Shift right, starting with the second to last value and
// shifting it into the last value

		arr[i]=arr[i-1];  
	}
	arr[0]=temp;
}

2. b)
public static int indexOf(int[] arr1, int[] arr2)
{
	if(arr1.length>arr2.length)
	{
		return -1;
	}

	for(int i=0; i<arr2.length-arr1.length; i++)
	{
		for(int j=0; j<arr1.length; j++)
		{
			if(arr1[j]==arr2[i+j])
			{
				if(j==arr1.length-1)
				{
					return i;
				}
			}
		}
	}
	return -1;
}

3. a)
main calls mystery(5, 6)
	mystery(5, 6) calls mystery(4, 4)
		mystery(4, 4) calls mystery(3, 2)
			mystery(3, 2) calls mystery(2, 0) 
				mystery (2, 0) returns 2
			mystery(3, 2) returns 2 + 2 (which is 4)
		mystery(4, 4) returns 4 + 4 (which is 8)
	mystery(5, 6) returns 6 + 8 (which is 14)
main()

3. b) mystery(5, 6) returns 14

3. c) There are 5 stack frames

3. d) Any combination of a*b that will never equal 0 will cause the base
case never to get reached, and hence, infinite recursion.  One such example
is when a and b are both negative numbers, as they will both keep becoming larger
negatives when they make recursive calls and a*b will never equal 0.

4. a)
public static boolean search(Object myObject, Object[] arr)
{
	for (int i=0; i<arr.length; i++){
		if(arr[i].equals(myObject)){
			return true;
		}
	}
	return false;
}

4. b)
public static boolean search(Object myObject, Object[] arr, int i)
{
	if(i>arr.length-1 || i<0)
		throw new IllegalArgumentException("i must be a valid index value for arr");
		
	if(arr[i].equals(myObject))
		return true;
	else if(i==arr.length-1)
		return false;				
	return search(myObject, arr, i+1);
}